function getSingleAnalysis(symbol) {
  Logger.log("Retrieving data from Yahoo Finance for " + symbol)
  var queryString = "?symbol="+symbol;
  var url = "https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-analysis" + queryString;
  var headers = ({
	"x-Rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
	"x-RapidApi-Key": ""
  });
  var options = {
    "method" : "GET",
    "headers" : {
      "x-Rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
      "x-RapidApi-Key": ""
      },
    "muteHttpExceptions" : true
   };
  // var response = UrlFetchApp.fetch(url,options);
  var sheetResult = [];
  
  try {
    // Block of code to try
    var response = UrlFetchApp.fetch(url,options);
  }
  catch(err) {
    // Block of code to handle errors
    Logger.log(" fetch error: " +  err.message)
  }
  finally {
    // Block of code to be executed regardless of the try / catch result
    // Initialize spreadsheet variable to legal values
    findata = "N/A"
    price_targetLowPrice = 0;
    price_targetMedianPrice = 0;
    price_targetMeanPrice = 0;
    price_targetHighPrice = 0;
    price_profitMargins = 0;
    price_quoteType = "N/A"
    price_regularMarketPrice = 0;
    sd_dividendRate = 0;
    sd_fiftyTwoWeekLow = 0;
    sd_fiftyTwoWeekHigh = 0;
    sd_forwardPE = 0;
    sd_dividendYield = 0;
    sd_exDividendDate = 0;
    sd_volume = 0;
  }
  
  if (response.getResponseCode() == 200){
    try {
      // Block of code to try
      var content = JSON.parse(response.getContentText());
      if(content["financialData"]["recommendationKey"] === undefined)
        findata = 0;
      else
        findata = content["financialData"]["recommendationKey"];
      Logger.log(symbol + " analyst recommentation is " + findata);
    
      // *********************************************************************************
      // 1 year price target
      //   Low
      //   Median
      //   Mean
      //   High
      //
      if(content["financialData"]["targetLowPrice"] === undefined)
        price_targetLowPrice = 0;
      else
        price_targetLowPrice = content["financialData"]["targetLowPrice"]["fmt"];
      Logger.log(" price_targetLowPrice is " + price_targetLowPrice);
    
      if(content["financialData"]["targetMedianPrice"] === undefined)
        price_targetMedianPrice = 0;
      else
        price_targetMedianPrice = content["financialData"]["targetMedianPrice"]["fmt"];
      Logger.log(" price_targetMedianPrice is " + price_targetMedianPrice);
    
      if(content["financialData"]["targetMeanPrice"] === undefined)
        price_targetMeanPrice = 0;
      else
        price_targetMeanPrice = content["financialData"]["targetMeanPrice"]["fmt"];
      Logger.log(" price_targetMeanPrice is " + price_targetMeanPrice);
    
      if(content["financialData"]["targetHighPrice"] === undefined)
        price_targetHighPrice = 0;
      else
        price_targetHighPrice = content["financialData"]["targetHighPrice"]["fmt"];
      Logger.log(" price_targetHighPrice is " + price_targetHighPrice);
    
      //**********************************************************************************
      // Profit Margins
      //
      if(content["financialData"]["profitMargins"] === undefined)
        price_profitMargins = 0;
      else
        price_profitMargins = content["financialData"]["profitMargins"]["fmt"];
      Logger.log(" price_profitMargins is " + price_profitMargins);
      //**********************************************************************************

      price_quoteType = content["price"]["quoteType"];
      //if(price_quoteType === undefined)
        //price_quoteType = 0;
      Logger.log(" price_quoteType is " + price_quoteType);
    
      if(content["price"]["regularMarketPrice"] === undefined)
        price_regularMarketPrice = 0;
      else
        price_regularMarketPrice = content["price"]["regularMarketPrice"]["fmt"];
      Logger.log(" price_regularMarketPrice is " + price_regularMarketPrice);
    
      if(content["summaryDetail"]["dividendRate"] === undefined)
        sd_dividendRate = 0;
      else
        sd_dividendRate = content["summaryDetail"]["dividendRate"]["fmt"];
      Logger.log(" price_regularMarketPrice is " + sd_dividendRate);
   
      if(content["summaryDetail"]["fiftyTwoWeekLow"] === undefined)
        sd_fiftyTwoWeekLow = 0;
      else
        sd_fiftyTwoWeekLow = content["summaryDetail"]["fiftyTwoWeekLow"]["fmt"];
      Logger.log(" sd_fiftyTwoWeekLow is " + sd_fiftyTwoWeekLow);
      
      if(content["summaryDetail"]["fiftyTwoWeekHigh"] === undefined)
        sd_fiftyTwoWeekHigh = 0;
      else
        sd_fiftyTwoWeekHigh = content["summaryDetail"]["fiftyTwoWeekHigh"]["fmt"];
      Logger.log(" sd_fiftyTwoWeekHigh is " + sd_fiftyTwoWeekHigh);
    
      if(content["summaryDetail"]["forwardPE"] === undefined)
        sd_forwardPE = 0;
      else
        sd_forwardPE = content["summaryDetail"]["forwardPE"]["fmt"];
      Logger.log(" sd_forwardPEe is " + sd_forwardPE);
    
      if(content["summaryDetail"]["dividendYield"] === undefined)
        sd_dividendYield = 0;
      else
        sd_dividendYield = content["summaryDetail"]["dividendYield"]["fmt"];
      Logger.log(" sd_dividendYield is " + sd_dividendYield);
    
      if(content["summaryDetail"]["exDividendDate"] === undefined)
        sd_exDividendDate = 0;
      else
        sd_exDividendDate = content["summaryDetail"]["exDividendDate"]["fmt"];
      Logger.log(" sd_exDividendDate is " + sd_exDividendDate);
    
      if(content["summaryDetail"]["volume"] === undefined)
        sd_volume = 0;
      else
        sd_volume = content["summaryDetail"]["volume"]["fmt"];
      Logger.log(" sd_volume is " + sd_volume);
    }
    catch(err) {
      // Block of code to handle errors
      Logger.log(" error in extracting fields from content");
    }
  }
  else{
    Logger.log("response.getResponseCode is " + response.getResponseCode());
  }
  
  sheetResult.push("NF",price_regularMarketPrice,sd_dividendYield,"NF",
                   sd_exDividendDate,sd_forwardPE,sd_fiftyTwoWeekHigh,sd_fiftyTwoWeekLow,sd_volume,
                   price_quoteType,
                   findata,
                   price_targetLowPrice,price_targetMedianPrice,price_targetMeanPrice,price_targetHighPrice,price_profitMargins);
  return sheetResult; 
}
