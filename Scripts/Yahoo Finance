var ndx_symbol
var ndx_regMarketPrice
var ndx_dividendYield
var ndx_yahooCovered
var ndx_exDividendDate
var ndx_forwardPE
var ndx_high52Week
var ndx_low52Week
var ndx_vol
var ndx_quoteType
var ndx_recommendation
var ndx_tgtLow
var ndx_tgtMedian
var ndx_tgtMean
var ndx_tgtHigh
var ndx_margin

function isTimeUp_(start) {
  var now = new Date();
  return now.getTime() - start.getTime() > 300000; // 5 minutes
}

function updateSymbol(symbol, dataRow, apiYahooData) {
  var content

  Logger.log("Updating: " + symbol)
  content = JSON.parse(apiYahooData.getContentText());
  coveredByYahoo = "N"
  
  if(content["financialData"]["recommendationKey"] === undefined)
    fdAnalystRecommendation = "N/A"
  else
    fdAnalystRecommendation = content["financialData"]["recommendationKey"];
    
  if(content["financialData"]["targetLowPrice"] === undefined)
    fdTargetLowPrice = 0;
  else
    fdTargetLowPrice = content["financialData"]["targetLowPrice"]["fmt"];
    
  if(content["financialData"]["targetMedianPrice"] === undefined)
    fdTargetMedianPrice = 0;
  else
    fdTargetMedianPrice = content["financialData"]["targetMedianPrice"]["fmt"];
  
  if(content["financialData"]["targetMeanPrice"] === undefined)
    fdTargetMeanPrice = 0;
  else
    fdTargetMeanPrice = content["financialData"]["targetMeanPrice"]["fmt"];
    
  if(content["financialData"]["targetHighPrice"] === undefined)
    fdTargetHighPrice = 0;
  else
    fdTargetHighPrice = content["financialData"]["targetHighPrice"]["fmt"];
    
  if(content["financialData"]["profitMargins"] === undefined)
    fdProfitMargins = 0;
  else
    fdProfitMargins = content["financialData"]["profitMargins"]["fmt"];

  price_quoteType = content["price"]["quoteType"];
    
  if(content["price"]["regularMarketPrice"] === undefined)
    price_regularMarketPrice = 0;
  else
    price_regularMarketPrice = content["price"]["regularMarketPrice"]["fmt"];
    
  if(content["summaryDetail"]["fiftyTwoWeekLow"] === undefined)
    sd_fiftyTwoWeekLow = 0;
  else
    sd_fiftyTwoWeekLow = content["summaryDetail"]["fiftyTwoWeekLow"]["fmt"];
    
  if(content["summaryDetail"]["fiftyTwoWeekHigh"] === undefined)
    sd_fiftyTwoWeekHigh = 0;
  else
    sd_fiftyTwoWeekHigh = content["summaryDetail"]["fiftyTwoWeekHigh"]["fmt"];
  
  if(content["summaryDetail"]["forwardPE"] === undefined)
    sd_forwardPE = 0;
  else
    sd_forwardPE = content["summaryDetail"]["forwardPE"]["fmt"];
    
  if(content["summaryDetail"]["dividendYield"] === undefined)
    sd_dividendYield = 0;
  else
    sd_dividendYield = content["summaryDetail"]["dividendYield"]["fmt"];
 
  if(content["summaryDetail"]["exDividendDate"] === undefined)
    sd_exDividendDate = 0;
  else
    sd_exDividendDate = content["summaryDetail"]["exDividendDate"]["fmt"];
    
  if(content["summaryDetail"]["volume"] === undefined)
    sd_volume = 0;
  else
    sd_volume = content["summaryDetail"]["volume"]["fmt"];

  sheetSymbol = dataRow[0][ndx_symbol]
  if (symbol == dataRow[0][ndx_symbol]) {
    dataRow[0][ndx_yahooCovered] = coveredByYahoo
    dataRow[0][ndx_recommendation] = fdAnalystRecommendation
    dataRow[0][ndx_tgtLow] = fdTargetLowPrice
    dataRow[0][ndx_tgtMedian] = fdTargetMedianPrice
    dataRow[0][ndx_tgtMean] = fdTargetMeanPrice
    dataRow[0][ndx_tgtHigh] = fdTargetHighPrice
    dataRow[0][ndx_margin] = fdProfitMargins
    dataRow[0][ndx_regMarketPrice] = price_regularMarketPrice
    dataRow[0][ndx_quoteType] = price_quoteType
    dataRow[0][ndx_dividendYield] = sd_dividendYield
    dataRow[0][ndx_exDividendDate] = sd_exDividendDate
    dataRow[0][ndx_forwardPE] = sd_forwardPE
    dataRow[0][ndx_high52Week] = sd_fiftyTwoWeekHigh
    dataRow[0][ndx_low52Week] = sd_fiftyTwoWeekLow
    dataRow[0][ndx_vol] = sd_volume
    dataRow = dataRow.setValues(dataRow)
  }
}

function TEMPgetSingleAnalysis(symbol, RapidAPIKey) {
  var queryString = "?symbol="+symbol;
  var url = "https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-analysis" + queryString;
  var headers = ({
	"x-Rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
	"x-RapidApi-Key": RapidAPIKey
  });
  var options = {
    "method" : "GET",
    "headers" : {
      "x-Rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
      "x-RapidApi-Key": RapidAPIKey
      },
    "muteHttpExceptions" : true
   };
   var response

  try {
    // Block of code to try
    //Logger.log("Retrieving data from Yahoo Finance for " + symbol)
    response = UrlFetchApp.fetch(url,options);
  }
  catch(err) {
    // Block of code to handle errors
    //Logger.log("fetch error: " +  err.message)
    response = ""
  }
  finally {
    // Block of code to be executed regardless of the try / catch result
    // Initialize spreadsheet variable to legal values
    //Logger.log("finally")
  }

  return response; 
}

function UpdateYahooFinanceData() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var x, y
  var rapidAPIKeyRange, rapidAPIKey
  var startSymbolRange, startSymbol
  var endSymbolRange, endSymbol
  var headers
  var symbols
  var start
  var apiYahooData, content

  yahoo_finance_sheet = spreadsheet.setActiveSheet(spreadsheet.getSheetByName("Yahoo Finance"))
  Logger.log("Yahoo Finance set active")
  
  cols = 18
  lastCol = "R"
  parametersRow = 1
  columnHeadersRow = 2
  startRow = 3
  rapidAPICol = "B"
  startSymbolCol = "H"
  endSymbolCol = "J"
  firstCol = "A"
  rows = 500

  rapidAPIKeyRange = yahoo_finance_sheet.getRange(rapidAPICol + parametersRow + ":" + rapidAPICol + parametersRow)
  spreadsheet.setActiveRange(rapidAPIKeyRange)
  rapidAPIKey = rapidAPIKeyRange.getValues()

  startSymbolRange = yahoo_finance_sheet.getRange(startSymbolCol + parametersRow + ":" + startSymbolCol + parametersRow)
  spreadsheet.setActiveRange(startSymbolRange)
  startSymbol = startSymbolRange.getValues()

  endSymbolRange = yahoo_finance_sheet.getRange(endSymbolCol + parametersRow + ":" + endSymbolCol + parametersRow)
  spreadsheet.setActiveRange(endSymbolRange)
  endSymbol = endSymbolRange.getValues()
  Logger.log("Starting with: " + startSymbol + " and ending with: " + endSymbol)

  colHeaders = yahoo_finance_sheet.getRange(firstCol + columnHeadersRow + ":" + lastCol + columnHeadersRow)
  spreadsheet.setActiveRange(colHeaders)
  headers = colHeaders.getValues()
  //Logger.log("headers count: " + headers[0].length + " " + headers[0])
  x = 0
  while (x < headers[0].length) {
    //Logger.log("Header: " + headers[0][x])
    // Examine sheet headers to identify data columns
    //Last Chg (%)	Last		Div amount						
    if (headers[0][x] == "Symbol") {ndx_symbol = x}
    if (headers[0][x] == "Covered") {ndx_yahooCovered = x}
    if (headers[0][x] == "Last") {ndx_regMarketPrice = x}
    if (headers[0][x] == "Div yield") {ndx_dividendYield = x}
    if (headers[0][x] == "Ex-div date") {ndx_exDividendDate = x}
    if (headers[0][x] == "P/E") {ndx_forwardPE = x}
    if (headers[0][x] == "52-week high") {ndx_high52Week = x}
    if (headers[0][x] == "52-week low") {ndx_low52Week = x}
    if (headers[0][x] == "Volume") {ndx_vol = x}
    if (headers[0][x] == "Asset") {ndx_quoteType = x}
    if (headers[0][x] == "Recommendation") {ndx_recommendation = x}
    if (headers[0][x] == "Low") {ndx_tgtLow = x}
    if (headers[0][x] == "Median") {ndx_tgtMedian = x}
    if (headers[0][x] == "Mean") {ndx_tgtMean = x}
    if (headers[0][x] == "High") {ndx_tgtHigh = x}
    if (headers[0][x] == "Profit Margins") {ndx_margin = x}
    x += 1
  }
  
  txtSymbolsRange = firstCol + startRow + ":" + firstCol + (startRow + (rows-1))
  symbolsRange = yahoo_finance_sheet.getRange(txtSymbolsRange)
  spreadsheet.setActiveRange(symbolsRange)
  symbols = symbolsRange.getValues()
  //Logger.log("symbols " + symbols)

  txtDataRange = firstCol + startRow + ":" + lastCol + (startRow + (rows-1))
  dataRange = yahoo_finance_sheet.getRange(txtDataRange)

  dataValues = dataRange.getValues()
  y = 0
  startFound = false
  start = new Date();
  while (y < symbols.length) {
    if (isTimeUp_(start)) {
      //ensure script terminates cleanly before Google execution time limit
      Logger.log("Time limit reached - restart at " + symbols[y][0]);
      break
    }

    if (symbols[y][0] == "") {break}
    if (symbols[y][0] == startSymbol) {
      //support processing (re)starting from a row other than the first symbol
      startFound = true
    }

    try {
      // Block of code to try
      //Logger.log("Symbol: " + symbols[y][ndx_symbol])
      if (startFound) {

        // change to pass 1 row data range
        // test row data range for Yahoo covered NOT symbols
        txtDataRow = firstCol + (startRow + y) + ":" + lastCol + (startRow + y)
        dataRow = yahoo_finance_sheet.getRange(txtDataRow)
        dataRowValues = dataRow.getValues()

        if (dataRowValues[0][ndx_yahooCovered] != "N") {
          apiYahooData = TEMPgetSingleAnalysis(symbols[y][ndx_symbol], rapidAPIKey[0][0])
          if (apiYahooData == "") {
            Logger.log("API call failed for " + symbols[y][ndx_symbol])
            break
          }
          else {
            if (apiYahooData.getResponseCode() == 200){
              updateSymbol(symbols[y][ndx_symbol], dataRow, apiYahooData)
            }
            else {
              //extract response message from apiYahooData
              content = JSON.parse(apiYahooData.getContentText());
              Logger.log("For symbol " + symbols[y][ndx_symbol] + " the API call returned error code " + apiYahooData.getResponseCode() + " " + content["message"])
              break
            }
          }
        }
      }
    }
    catch(err) {
      // Block of code to handle errors
      Logger.log("For symbol " + symbols[y][ndx_symbol] + " the API call returned invalid data " + err)
      break
    }
    finally {
      // Block of code to be executed regardless of the try / catch result
    }

    //support termination prior to the last row of symbols in the sheet
    if (symbols[y][ndx_symbol] == endSymbol){break}
    y += 1
  }
}
